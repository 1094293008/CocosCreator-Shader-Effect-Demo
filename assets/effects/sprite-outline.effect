// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: grey }
        alphaThreshold: { value: 0.5 }
        outlineColor: { value: [1., .0, .0, 1.], editor: { type: color } }
        outlineSize: { value: .01 }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  #if SHOW_OUT_LINE

  uniform Outline {
    // 描边颜色 
    vec4 outlineColor;
    // 描边偏移大小
    float outlineSize;
    // 特别地，必须是 vec4 先于 float 声明
  };

  // 获取背面颜色
  // 取当前点上、下、左、右、上左、上右、下左、下右共计8个方向，距离为 outlineSize 的8个点，求他们的透明度之和
  // 由此可以得到当前点是否属于图像往八个方向做偏移后得到的放大图区域，并且能得到该点最终透明度值
  // 最终对应的为图像偏移/放大后的背景区域
  float getBackArea() {
    vec4 color_up = texture(texture, v_uv0 + vec2(0, outlineSize)); 
    vec4 color_down = texture(texture, v_uv0 - vec2(0, outlineSize)); 
    vec4 color_left = texture(texture, v_uv0 - vec2(outlineSize, 0)); 
    vec4 color_right = texture(texture, v_uv0 + vec2(outlineSize, 0)); 
    vec4 color_up_left = texture(texture, v_uv0 + vec2(outlineSize, -outlineSize)); 
    vec4 color_up_right = texture(texture, v_uv0 + vec2(outlineSize, outlineSize)); 
    vec4 color_down_left = texture(texture, v_uv0 + vec2(-outlineSize, -outlineSize)); 
    vec4 color_down_right = texture(texture, v_uv0 + vec2(-outlineSize, outlineSize)); 
    float total = color_right.a + color_left.a + color_down.a + color_up.a + color_up_left.a + color_up_right.a + color_down_left.a + color_down_right.a; 
    return clamp(total, 0.0, 1.0);
  }

  #endif

  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
    o *= texture(texture, v_uv0);
      #if CC_USE_ALPHA_ATLAS_TEXTURE
      o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;
      #endif
    #endif

    o *= v_color;

    ALPHA_TEST(o);

    gl_FragColor = o;

    #if SHOW_OUT_LINE
      // 给放大后的区域填我们的背景颜色（实际为描边颜色）
      gl_FragColor = outlineColor * getBackArea();

      // 然后在这个区域上，叠加上我们原来图像
      gl_FragColor = o + (1.0 - o.a) * gl_FragColor;

      // gl_FragColor = o +（1.0 - o.a) * outlineColor * getBackArea();

      // 原来的实现
      // gl_FragColor = vec4(o.rgb + (1.0 - o.a) * outlineColor.rgb * getBackArea(), 1.0);
    #endif
  }
}%
