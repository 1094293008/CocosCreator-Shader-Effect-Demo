// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  
// 圆角裁剪
// 原理：https://www.cnblogs.com/jqm304775992/p/4987793.html
// 代码：复制 yanjifa/shaderDemor 的 https://github.com/yanjifa/shaderDemo/blob/master/assets/Effect/CircleAvatar.effect

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        # 圆角半径
        roundCornerRadius: {
          value: 0.1,
          inspector: {
            tooltip: "圆角半径",
            range: [0.0, 0.5]
          }
        }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  #if ENABLE_ROUNDCORNER
  uniform RoundCorner {
    // 圆角半径
    float roundCornerRadius;
  }
  #endif

  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
    o *= texture(texture, v_uv0);
      #if CC_USE_ALPHA_ATLAS_TEXTURE
      o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;
      #endif
    #endif

    o *= v_color;

    ALPHA_TEST(o);

    #if ENABLE_ROUNDCORNER
    vec2 uv = v_uv0.xy - vec2(0.5, 0.5);
    float rx = abs(uv.x) - (0.5 - roundCornerRadius);
    float ry = abs(uv.y) - (0.5 - roundCornerRadius);
    float mx = step(0.5 - roundCornerRadius, abs(uv.x));
    float my = step(0.5 - roundCornerRadius, abs(uv.y));
    float radius = length(vec2(rx, ry));
    float a = 1.0 - mx * my * step(roundCornerRadius, radius) * smoothstep(0., roundCornerRadius * 0.01, radius - roundCornerRadius);
    o = vec4(o.rgb, o.a * a);
    #endif
    gl_FragColor = o;
  }
}%
