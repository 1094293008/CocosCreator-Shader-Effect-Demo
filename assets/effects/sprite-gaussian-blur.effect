// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  
// 高斯模糊

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        # # 灰化程度
        # grayLevel: {
        #   value: 1.0,
        #   inspector: {
        #     tooltip: "灰化程度",
        #     range: [0.0, 1.0]
        #   }
        # }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  #if ENABLE_GAUSSIAN_BLUR

  // 定义无理数
  #define e 2.718281828459045

  // 定义标准方差值
  #define stdDev 0.84089642
  // #define stdDev 1.5

  // 定义π
  #define pi 3.141592653589793

  // // 接收外部变量
  // uniform GaussianBlur {
  // }
 

  /**
   * 获取权重(对应二维高斯函数公式)
   * 
   * @param x   
   * @param y
   */
  float getWeight(float x, float y) {
    return (1.0 / (2.0 * pi * pow(stdDev, 2.0))) * pow(1.0 / e, (pow(x, 2.0) + pow(y, 2.0)) / (2.0 * pow(stdDev, 2.0)));
  }

  /**
   * 获取权重的加权平均值
   */
  float getAverageWeight(float x, float y, float totalWeight) {
    return getWeight(x, y) / totalWeight;
  }

  #endif

  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
    o *= texture(texture, v_uv0);
      #if CC_USE_ALPHA_ATLAS_TEXTURE
      o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;
      #endif
    #endif

    o *= v_color;

    ALPHA_TEST(o);

    gl_FragColor = o;
    #if ENABLE_GAUSSIAN_BLUR
      const float size = ceil(stdDev * 6.0);
      float divider = 0.01; 
      float totalWeight = 0.0; 
      for(float x = -floor(size / 2.0); x<= floor(size/ 2.0); x++) {
        for (float y = -floor(size / 2.0); y<= floor(size/ 2.0); y++) {
          totalWeight += getWeight(x, y);
        }
      }

      vec4 finalColor = vec4(0.0, 0.0, 0.0, 0.0);
      for(float x = -floor(size / 2.0); x<= floor(size/ 2.0); x++) {
        for (float y = -floor(size / 2.0); y<= floor(size/ 2.0); y++) {
          float weight = getAverageWeight(x, y, totalWeight);
          finalColor += texture(texture, v_uv0 + vec2(divider * x, divider * y)) * weight;
        }
      }
      gl_FragColor = finalColor;
    #endif
  }
}%
